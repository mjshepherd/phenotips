<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/
-->

<xwikidoc version="1.1">
  <web>data</web>
  <name>AllData</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1401822185000</creationDate>
  <parent>data.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1401822185000</date>
  <contentUpdateDate>1401822185000</contentUpdateDate>
  <version>1.1</version>
  <title>$services.localization.render('data.allData.title')</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{include reference="PhenoTips.DatabaseFilters" /}}

{{velocity}}
$xwiki.ssfx.use('icons/font-awesome/css/font-awesome.min.css')##
$xwiki.ssx.use('PhenoTips.FontAwesomeIcons')##
{{html wiki=false clean=false}}&lt;div class="general-tools"&gt;#if($hasCreatePage)&lt;label for="create-patient-record"&gt;&lt;span class="fa fa-plus-circle"&gt; &lt;/span&gt;$services.localization.render('phenotips.globalHeader.createPatient')&lt;/label&gt; · #end&lt;a id="phenotips_export" class="phenotips_export_tool" title="$services.localization.render('phenotips.allData.exportExcelTitle')" href="$xwiki.getURL('PhenoTips.Export', 'get', "space=${escapetool.url($doc.space)}&amp;amp;outputSyntax=plain")"&gt;&lt;span class="fa fa-table"&gt; &lt;/span&gt;$services.localization.render('phenotips.allData.exportExcel')&lt;/a&gt; · &lt;a id="phenotips_json_export" class="phenotips_export_tool" title="$services.localization.render('phenotips.allData.exportJSONTitle')" href="$xwiki.getURL('PhenoTips.ExportJSON', 'get', "space=${escapetool.url($doc.space)}&amp;amp;outputSyntax=plain")"&gt;&lt;span class="fa fa-file-o"&gt; &lt;/span&gt;$services.localization.render('phenotips.allData.exportJSON')&lt;/a&gt;{{/html}}##
#set ($service = $services.pushPatient)##
#set ($configuredServers = $service.getPushTargetsWithHistory(""))##
#set ($counter = 0)##
#foreach ($mapEntry in $configuredServers.entrySet())##
  #set ($serverName = $mapEntry.key.getServerID())##
{{html wiki=false clean=false}} · &lt;a href="#" id="pushall-server-$counter" name="$serverName" title="$services.localization.render('phenotips.allData.pushTitle',[$serverName])"&gt;&lt;span class="fa fa-share"&gt; &lt;/span&gt;$services.localization.render('phenotips.allData.push', [$serverName])&lt;/a&gt;{{/html}}##
  #set( $counter = $counter + 1 )##
#end##
{{html wiki=false clean=false}}&lt;/div&gt;{{/html}}##
{{/velocity}}

{{velocity}}
$xwiki.ssfx.use('uicomponents/suggest/suggestPicker.css', true)##
$xwiki.jsfx.use('uicomponents/suggest/suggestPicker.js', true)##
$xwiki.ssfx.use('uicomponents/widgets/userpicker/userPicker.css', true)##
$xwiki.jsfx.use('uicomponents/widgets/userpicker/userPicker.js', true)##
$xwiki.ssx.use('PhenoTips.DatabaseFilters')##
$xwiki.ssx.use('PhenoTips.Skin', {'colorTheme' : "$xwiki.getSpacePreference('colorTheme')"})##
$xwiki.jsx.use('PhenoTips.DBWebHomeSheet')##
$xwiki.ssx.use('PhenoTips.DBWebHomeSheet')##
$xwiki.ssx.use('PhenoTips.Widgets')##
$xwiki.jsx.use('PhenoTips.Widgets')##
$xwiki.jsx.use('XWiki.DateTimePicker')##
$xwiki.ssx.use('XWiki.DateTimePicker')##
$xwiki.jsx.use('PhenoTips.PushPatient')##
$xwiki.ssx.use('PhenoTips.PushPatient')##
#set ($config = $xwiki.getDocument('data.WebHome').getObject('PhenoTips.DBConfigurationClass'))
#set ($patientClassName = 'PhenoTips.PatientClass')
#if ($config)
#set ($configuredColumns = $config.getProperty('livetableColumns').value)
#if (!$configuredColumns &amp;&amp; !($configuredColumns.length &gt; 0))
  #set ($configuredColumns = 'doc.name')
#end
#set ($columns = [])
#set($discard = $columns.add('doc.fullName'))
#set ($discard = $columns.addAll($configuredColumns))
#set ($columnsProperties = {
  '_actions' : {'actions': ['edit', 'delete']}
})
#foreach ($column in $columns)
  #set ($isFilterable = ($column.toLowerCase().indexOf('date') &lt; 0) &amp;&amp; ($column != 'doc.creator') &amp;&amp; ($column != 'doc.author'))
  #set ($discard = $columnsProperties.put($column, { 'type' : 'text', 'link' : 'view', 'size' : 7, 'filterable' : $isFilterable, 'sortable': true}))
#end
##  toggle-filters
#set ($topFilters = $doc.getRenderedContent("(% class='xform' %)((( {{html clean='false'}}&lt;span class='buttonwrapper'&gt;&lt;a class='button toggle-filters' href='#'&gt;$services.localization.render('phenotips.allData.filterButton')&lt;/a&gt;&lt;/span&gt;{{/html}}
{{velocity}}#__filters_display('xform'){{/velocity}})))", "xwiki/2.1"))
#set ($discard = $columns.add('_actions'))
##
#set ($options = {
  'className'         : $patientClassName,
  'translationPrefix' : 'patient.livetable.',
  'rowCount'          : 25,
  'maxPages'          : 10,
  'selectedColumn'    : $config.getProperty('livetableSortColumn').value,
  'defaultOrder'      : 'asc',
  'topFilters'        : $topFilters,
  'resultPage'        : 'PhenoTips.LiveTableResults'
})
#if ($isGuest)
  #set ($filterFrom = ", BaseObject accessObj, StringProperty accessProp, LongProperty iid")
  #set ($filterWhere = "and iid.id.id = obj.id and iid.id.name = 'identifier' and iid.value &gt;= 0 and accessObj.name = doc.fullName and accessProp.id.id = accessObj.id and accessObj.className = 'PhenoTips.OwnerClass' and (accessProp.value = '' or accessProp.value is null)")
  #set ($discard = $options.put('extraParams', "&amp;filterFrom=${escapetool.url($filterFrom)}&amp;filterWhere=${escapetool.url($filterWhere)}"))
#elseif (!$hasAdmin)
  #set ($groups = [])
  #set ($toProcess = $collectionstool.queue)
  #if ($xcontext.userReference)
    #set ($discard = $groups.add($xcontext.userReference))
    #set ($discard = $toProcess.add($xcontext.userReference.toString()))
  #end
  #foreach ($iteration in [0..1000])
    #if ($toProcess.empty)
      #break
    #end
    #set ($item = $toProcess.poll())
    #foreach ($group in $xwiki.wrapDocs($xwiki.rightsmanager.getAllGroupsNamesForMember($item)))
      #set ($groupObj = $group.getObject('PhenoTips.PhenoTipsGroupClass'))
      #if (!$groupObj &amp;&amp; $group.documentReference.name.endsWith(' Administrators'))
        #set ($group = $xwiki.getDocument($services.model.resolveDocument($stringtool.removeEnd($group.documentReference.name, ' Administrators'), $group.documentReference.parent)))
        #set ($groupObj = $group.getObject('PhenoTips.PhenoTipsGroupClass'))
      #end
      #if ($groupObj &amp;&amp; !$groups.contains($group.documentReference.toString()))
        #set ($discard = $toProcess.add($group.documentReference.toString()))
        #set ($discard = $groups.add($escapetool.sql($group.documentReference.toString())))
      #end
    #end
  #end
  #set ($groups = "('${stringtool.join($groups, ""','"")}')")
  #set ($filterFrom = ", BaseObject accessObj, StringProperty accessProp, LongProperty iid")
  #set ($filterWhere = "and iid.id.id = obj.id and iid.id.name = 'identifier' and iid.value &gt;= 0 and accessObj.name = doc.fullName and accessProp.id.id = accessObj.id and ((accessObj.className = 'PhenoTips.OwnerClass' and accessProp.value in ${groups}) or (accessObj.className = 'PhenoTips.CollaboratorClass' and accessProp.value in ${groups}) or (accessObj.className = 'PhenoTips.VisibilityClass' and accessProp.value in ('public', 'open')))")
  #set ($discard = $options.put('extraParams', "&amp;filterFrom=${escapetool.url($filterFrom)}&amp;filterWhere=${escapetool.url($filterWhere)}"))
#else
  #set ($filterFrom = ", LongProperty iid")
  #set ($filterWhere = "and iid.id.id = obj.id and iid.id.name = 'identifier' and iid.value &gt;= 0")
  #set ($discard = $options.put('extraParams', "&amp;filterFrom=${escapetool.url($filterFrom)}&amp;filterWhere=${escapetool.url($filterWhere)}"))
#end
#if ("$!config.getProperty('livetableRows').value" != '' &amp;&amp; $config.getProperty('livetableRows').value &gt; 0)
  #set ($options.rowCount = $config.getProperty('livetableRows').value)
#end
##Add extra column to support checkbox service
#set($discard = $columnsProperties.put('doc.fullName', {'type' : 'hidden'}))
#livetable('patients' $columns $columnsProperties $options)
$xwiki.ssfx.use('js/xwiki/table/livetable.css', {'colorTheme' : "$xwiki.getSpacePreference('colorTheme')", 'forceSkinAction' : true})##
#else
{{warning}}$services.localization.render('phenotips.configurationMissing'){{/warning}}
#end
{{/velocity}}
</content>
  <object>
    <name>data.AllData</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>bf53cddc-92b9-43ae-aff8-d15408d29fe2</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>//Dont forget that in order for this to work the table must have an extra column, specified by columnName, that serves as a container/reference value for the checkbox data.
var PhenoTips = (function(PhenoTips) {
  var widgets = PhenoTips.widgets = PhenoTips.widgets || {};
    

  var DeleteButton = Class.create({
    initialize: function() {
      this.element = new Element('a', {'class' : 'button', 'href' : ''});
      this.element.innerHTML = "Delete";
      this.element.observe('click', this.onClick.bind(this));
    },
    getElement: function() {
      return this.element.wrap('div', { 'class': 'buttonwrapper' })
    },
    onClick: function(e) {
      e.preventDefault();
      e.stop();
      //do something
      console.log('Clicked!');
    }
  });
  var ModifyButton = Class.create({
    initialize: function() {
      this.element = new Element('a', {'class' : 'button', 'href' : ''});
      this.element.innerHTML = "Modify Permissions"
      this.element.observe('click', this.onClick.bind(this));
    },
    getElement: function() {
      return this.element.wrap('div', { 'class': 'buttonwrapper' })
    },
    onClick: function(e) {
      e.preventDefault();
      e.stop();
      //do something
      console.log('Clicked!');
    }
  });





  widgets.LivetableCheckboxColumn = Class.create({
    tableId: null ,
    columnIndex: null ,
    columnName: null ,
    cbValuesContainer: null ,
    serviceDocument: null ,
    initialize: function(parameters) {
      this.tableId = parameters.tableId;
      this.columnName = parameters.columnName;
      this.serviceDocument = parameters.serviceDocument;
      this.initializeCBValuesContainer()

      this.initializeCheckboxes()
      
      this.initializeButtons()
    },
    initializeButtons: function() {
      //TODO: hook or explicit?
      buttons = {
        delete: new DeleteButton(),
        modify: new ModifyButton()
      }
      this.buttonsContainer = new Element('div', {
          id: this.tableId + "-batchButtons", "class": "livetable-CBvalues"
        });
      $(this.tableId).insert({
        before: this.buttonsContainer
      });

      for (buttonName in buttons) {
        if (buttons.hasOwnProperty(buttonName)) {
          this.buttonsContainer.insert({
            bottom: buttons[buttonName].getElement()
          });
        }
      }

    },
    initializeCheckboxes: function() {
      //Add 'master' checkbox
      var masterCell = $(this.tableId)
        .down(".xwiki-livetable-display-header")
        .down("tr")
        .next()
        .firstDescendant();

      this.masterCheck = new Element('input', {'type' : 'checkbox', 'name' : 'masterCheckboxSelect'});
      this.masterCheck.observe('click', this.onClickMasterCheck.bind(this));
      masterCell.insert(this.masterCheck); 

      //Add event listener to add checkboxes to rows as they are created
      if (this.columnIndex != null ) {
        document.observe("xwiki:livetable:" + this.tableId + ":newrow", function(i) {
          this.addCheckboxToRow(i)
        }
        .bind(this))
      }
    },

    initializeCBValuesContainer: function() {
      this.cbValuesContainer = $(this.tableId + "-CBValues");
      if (!this.cbValuesContainer) {
        this.cbValuesContainer = new Element("div",{
          id: this.tableId + "-CBValues",
          "class": "livetable-CBvalues"
        });
        $(this.tableId).insert({
          before: this.cbValuesContainer
        });
        var headerRow = $(this.tableId).down(".xwiki-livetable-display-header").down("tr");
        var filterRow = headerRow.next();
        headerRow.select('th').forEach(function(th, index){
          if(th.down('a') &amp;&amp; th.down('a').rel == this.columnName) {
            this.columnIndex = index;
          }
          if(index == 0) {
            // Add checkbox column header
            var checkboxTh = new Element('th', {'class' : 'xwiki-livetable-display-header-text'});           
            var checkboxTd = new Element('td', {'class' : 'xwiki-livetable-display-header-filter'});
            th.insert({
              'before' : checkboxTh
            });
            filterRow.insert({
              'top' : checkboxTd
            });
          }
        }.bind(this));
      }
    },

    addCheckboxToRow : function(event) {
        var row = event.memo.row;

        if(!row.down('input[name=checkboxSelect]')) {

          // The column could be hidden -&gt; in that case, row doesn't have a corresponding td element for that column
          // This is why we're using the JSON data
          var data = event.memo.data;

          // Col name has to match the one in JSON
          var dataColName = this.columnName.replace(/doc./g, 'doc_')

          // Get the row value for the given column
          var rowValue = data[dataColName + '_value'];
          if(typeof rowValue === "undefined") {
            // Default values like doc_fullName ...
            rowValue = data[dataColName];
          }
          if(typeof rowValue !== "undefined") {
            var checkboxSelect = new Element('input', {'type' : 'checkbox', 'name' : 'checkboxSelect', 'value' : rowValue});
            this.cbValuesContainer.select('input').each(function(input){
              if(input.value === rowValue) {
                checkboxSelect.checked = true;
              }
            });
            row.insert({'top' : checkboxSelect});

            checkboxSelect.observe('click', this.onClickCheckBox.bind(this));
          }
        }
    },
    onClickCheckBox: function(e) {
      checkboxSelect = e.target
      if(checkboxSelect.checked) {
        //Add value to cbContainer
        var inputElem = new Element('input', {'name' : this.tableId + '-cb', 'value' : checkboxSelect.value});
        this.cbValuesContainer.insert({'bottom' : inputElem});
        checkboxSelect.up('tr').addClassName('highlighted')
      } else {
        //remove value from cbContainer
        this.cbValuesContainer.select('input').each(function(input){
          if(input.value === checkboxSelect.value) {
            input.parentNode.removeChild(input);
          }
        });
        checkboxSelect.up('tr').removeClassName('highlighted');
        //also remove check from master check if clicked
        if (this.masterCheck.checked) {
          this.masterCheck.checked = false;
        }
      }
    },
    onClickMasterCheck: function (e) {
      masterCheck = e.target;
      var table = $(this.tableId);
      if (masterCheck.checked) {
        table.select('input[name=checkboxSelect]').forEach(function(input){
          input.checked || input.click();
        })
      } else {
        table.select('input[name=checkboxSelect]').forEach(function(input){
          input.checked &amp;&amp; input.click();
        })
      }
    },
    sendDataToService : function(e) {
        e.stop();
        var urlParams = 'xpage=plain&amp;autputSyntax=plain';
        this.cbValuesContainer.select('input').each(function(input){
          urlParams += '&amp;cbData=' + encodeURIComponent(input.value);
        });
        ajaxURL = this.serviceDocument.getURL();
        new Ajax.Request(this.serviceDocument.getURL(), {
          parameters: urlParams,
          onSuccess : function(response) {
            // Handle response here
          }
        });

    }
  });
    
  return PhenoTips
}(PhenoTips || {}));

document.observe("xwiki:livetable:patients:loadingEntries", function(ev) {
    var params = {
        tableId : "patients",
        columnName : "doc.fullName",
        serviceDocument : new XWiki.Document("ServiceDocument", "Code", "xwiki"),
    }
    new PhenoTips.widgets.LivetableCheckboxColumn(params);
});
</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>data.AllData</name>
    <number>0</number>
    <className>XWiki.XWikiRights</className>
    <guid>0819c66d-208c-4d44-8cb8-b3c8a292d73a</guid>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <property>
      <allow>1</allow>
    </property>
    <property>
      <groups>XWiki.XWikiAdminGroup</groups>
    </property>
    <property>
      <levels>edit</levels>
    </property>
    <property>
      <users/>
    </property>
  </object>
</xwikidoc>
